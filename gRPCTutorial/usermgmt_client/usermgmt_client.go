package main

import (
	"context"
	"fmt"
	"log"
	"time"

	pb "example.com/go-usermgmt-grpc/usermgmt"
	"google.golang.org/grpc"
)

const ADDRESS = "localhost:500541"

func main() {
	// Here we are first dialing up a connection with the RPC server that is running.
	conn, err := grpc.Dial(ADDRESS, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalf("Couldn't dial up connection")
	}
	defer conn.Close()

	// Here we are using code generated by protocol buffer to create a client using connection we created above.
	c := pb.NewUserManagementClient(conn)

	// Now here we are preparing arguments that we will send to RPC call.
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	newUser := pb.NewUser{Name: "Ravi", Age: 23}

	// Now here we are making an actual RPC call..
	// This function definition is provided by PB only.
	// Because that's what the point of RPC is right. That it makes us feel that we are making a local function call but it is executed on server.
	// If we had to define this function , then it is listerally like making an HTTP request to remote server.
	u, e := c.CreateNewUser(ctx, &newUser)
	if e != nil {
		log.Fatalf("RPC call can't be made")
	}

	// Here we print the result we got from the server.
	fmt.Printf("Newly created user:%v", u)
}
